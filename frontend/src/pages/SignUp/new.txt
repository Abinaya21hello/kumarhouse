import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import {
  TextField,
  Button,
  IconButton,
  InputAdornment,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from "@mui/material";
import { Visibility, VisibilityOff } from "@mui/icons-material";
import { sendOtp, verifyOtpAndRegister } from "../../redux/actions/userActions";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const SignUp = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { loading, error, otpSent } = useSelector((state) => state.auth);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [street, setStreet] = useState("");
  const [district, setDistrict] = useState("");
  const [state, setState] = useState("");
  const [country, setCountry] = useState("");
  const [pincode, setPincode] = useState("");
  const [gender, setGender] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [emailError, setEmailError] = useState("");
  const [passwordError, setPasswordError] = useState("");
  const [confirmPasswordError, setConfirmPasswordError] = useState("");
  const [showLoader, setShowLoader] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [otp, setOtp] = useState("");
  const [openOtpModal, setOpenOtpModal] = useState(false);

  const handleEmailChange = (e) => {
    setEmail(e.target.value);
    if (!validateEmail(e.target.value)) {
      setEmailError("Please enter a valid email");
    } else {
      setEmailError("");
    }
  };

  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
    if (e.target.value.length < 6) {
      setPasswordError("Password must be at least 6 characters");
    } else {
      setPasswordError("");
    }
  };

  const handleConfirmPasswordChange = (e) => {
    setConfirmPassword(e.target.value);
    if (e.target.value !== password) {
      setConfirmPasswordError("Passwords do not match");
    } else {
      setConfirmPasswordError("");
    }
  };

  const validateEmail = (email) => {
    const emailRegex = /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/;
    return emailRegex.test(email);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    try {
      if (!validateForm()) {
        return;
      }

      setShowLoader(true);

      const userData = {
        name,
        email,
        phone,
        address: {
          street,
          district,
          state,
          country,
          pincode,
        },
        gender,
        password,
        confirmPassword,
      };

      dispatch(sendOtp(userData));
      setOpenOtpModal(true);
    } catch (error) {
      console.error("Failed to register user:", error);
      alert("An error occurred during registration.");
    } finally {
      setShowLoader(false);
    }
  };

  const handleOtpVerification = () => {
    const userData = {
      name,
      email,
      phone,
      address: {
        street,
        district,
        state,
        country,
        pincode,
      },
      gender,
      password,
    };
    dispatch(verifyOtpAndRegister(userData, otp, navigate));
  };

  const validateForm = () => {
    if (
      !name ||
      !email ||
      !phone ||
      !street ||
      !district ||
      !state ||
      !country ||
      !pincode ||
      !gender ||
      !password ||
      !confirmPassword
    ) {
      alert("Please fill in all required fields.");
      return false;
    }

    if (!validateEmail(email)) {
      setEmailError("Please enter a valid email");
      return false;
    }

    if (password.length < 6) {
      setPasswordError("Password must be at least 6 characters");
      return false;
    }

    if (confirmPassword !== password) {
      setConfirmPasswordError("Passwords do not match");
      return false;
    }

    return true;
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };

  return (
    <>
      <section className="signUp mb-5">
        <div className="breadcrumbWrapper">
          <div className="container-fluid">
            <ul className="breadcrumb breadcrumb2 mb-0">
              <li>
                <Link to="/">Home</Link>
              </li>
              <li>Sign Up</li>
            </ul>
          </div>
        </div>

        <div className="loginWrapper">
          <div className="card shadow">
            <h3>Sign Up</h3>

            <form className="mt-4" onSubmit={handleSubmit}>
              <div className="row">
                <div className="col-md-6 mb-4">
                  <TextField
                    id="name"
                    type="text"
                    name="name"
                    label="Name"
                    className="w-100"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                  />
                </div>
                <div className="col-md-6 mb-4">
                  <TextField
                    id="email"
                    type="email"
                    name="email"
                    label="Email"
                    className="w-100"
                    value={email}
                    onChange={handleEmailChange}
                    error={Boolean(emailError)}
                    helperText={emailError}
                  />
                </div>
              </div>

              <div className="row">
                <div className="col-md-6 mb-4">
                  <TextField
                    id="phone"
                    type="tel"
                    name="phone"
                    label="Phone"
                    className="w-100"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                  />
                </div>
                <div className="col-md-6 mb-4">
                  <TextField
                    id="street"
                    type="text"
                    name="street"
                    label="Street"
                    className="w-100"
                    value={street}
                    onChange={(e) => setStreet(e.target.value)}
                  />
                </div>
              </div>

              <div className="row">
                <div className="col-md-6 mb-4">
                  <TextField
                    id="district"
                    type="text"
                    name="district"
                    label="District"
                    className="w-100"
                    value={district}
                    onChange={(e) => setDistrict(e.target.value)}
                  />
                </div>
                <div className="col-md-6 mb-4">
                  <TextField
                    id="state"
                    type="text"
                    name="state"
                    label="State"
                    className="w-100"
                    value={state}
                    onChange={(e) => setState(e.target.value)}
                  />
                </div>
              </div>

              <div className="row">
                <div className="col-md-6 mb-4">
                  <TextField
                    id="country"
                    type="text"
                    name="country"
                    label="Country"
                    className="w-100"
                    value={country}
                    onChange={(e) => setCountry(e.target.value)}
                  />
                </div>
                <div className="col-md-6 mb-4">
                  <TextField
                    id="pincode"
                    type="text"
                    name="pincode"
                    label="Pincode"
                    className="w-100"
                    value={pincode}
                    onChange={(e) => setPincode(e.target.value)}
                  />
                </div>
              </div>

              <div className="row">
                <div className="col-md-6 mb-4">
                  <TextField
                    id="gender"
                    type="text"
                    name="gender"
                    label="Gender"
                    className="w-100"
                    value={gender}
                    onChange={(e) => setGender(e.target.value)}
                  />
                </div>
                <div className="col-md-6 mb-4">
                  <TextField
                    id="password"
                    type={showPassword ? "text" : "password"}
                    name="password"
                    label="Password"
                    className="w-100"
                    value={password}
                    onChange={handlePasswordChange}
                    error={Boolean(passwordError)}
                    helperText={passwordError}
                    InputProps={{
                      endAdornment: (
                        <InputAdornment position="end">
                          <IconButton
                            aria-label="toggle password visibility"
                            onClick={togglePasswordVisibility}
                          >
                            {showPassword ? <VisibilityOff /> : <Visibility />}
                          </IconButton>
                        </InputAdornment>
                      ),
                    }}
                  />
                </div>
              </div>

              <div className="row">
                <div className="col-md-6 mb-4">
                  <TextField
                    id="confirmPassword"
                    type={showPassword ? "text" : "password"}
                    name="confirmPassword"
                    label="Confirm Password"
                    className="w-100"
                    value={confirmPassword}
                    onChange={handleConfirmPasswordChange}
                    error={Boolean(confirmPasswordError)}
                    helperText={confirmPasswordError}
                    InputProps={{
                      endAdornment: (
                        <InputAdornment position="end">
                          <IconButton
                            aria-label="toggle confirm password visibility"
                            onClick={togglePasswordVisibility}
                          >
                            {showPassword ? <VisibilityOff /> : <Visibility />}
                          </IconButton>
                        </InputAdornment>
                      ),
                    }}
                  />
                </div>
              </div>

              <div className="row">
                <div className="col-md-12 text-center">
                  <Button
                    className="btn btn-g btn-lg"
                    type="submit"
                    disabled={showLoader}
                  >
                    {showLoader ? "Signing Up..." : "Sign Up"}
                  </Button>
                </div>
              </div>

              <div className="row">
                <div className="col-md-12 text-center">
                  <p className="text-center">
                    Already have an account? <Link to="/signIn">Sign In</Link>
                  </p>
                </div>
              </div>
            </form>
          </div>
        </div>
      </section>

      <Dialog
        open={openOtpModal}
        onClose={() => setOpenOtpModal(false)}
        aria-labelledby="form-dialog-title"
      >
        <DialogTitle id="form-dialog-title">Verify OTP</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            id="otp"
            label="Enter OTP"
            type="text"
            fullWidth
            value={otp}
            onChange={(e) => setOtp(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenOtpModal(false)} color="primary">
            Cancel
          </Button>
          <Button onClick={handleOtpVerification} color="primary">
            Verify
          </Button>
        </DialogActions>
      </Dialog>

      <ToastContainer />
    </>
  );
};

export default SignUp;
